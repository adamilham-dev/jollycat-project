// Generated by view binder compiler. Do not edit!
package com.example.jollycat.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.jollycat.R;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class RecyclerviewHistoryCardBinding implements ViewBinding {
  @NonNull
  private final CardView rootView;

  @NonNull
  public final FloatingActionButton btnDelete;

  @NonNull
  public final FloatingActionButton btnUpdate;

  @NonNull
  public final TextView idTVCatName;

  @NonNull
  public final TextView idTVNormalPrice;

  @NonNull
  public final TextView idTVQuantity;

  @NonNull
  public final TextView idTVTotalPrice;

  @NonNull
  public final TextView idTVTransaction;

  private RecyclerviewHistoryCardBinding(@NonNull CardView rootView,
      @NonNull FloatingActionButton btnDelete, @NonNull FloatingActionButton btnUpdate,
      @NonNull TextView idTVCatName, @NonNull TextView idTVNormalPrice,
      @NonNull TextView idTVQuantity, @NonNull TextView idTVTotalPrice,
      @NonNull TextView idTVTransaction) {
    this.rootView = rootView;
    this.btnDelete = btnDelete;
    this.btnUpdate = btnUpdate;
    this.idTVCatName = idTVCatName;
    this.idTVNormalPrice = idTVNormalPrice;
    this.idTVQuantity = idTVQuantity;
    this.idTVTotalPrice = idTVTotalPrice;
    this.idTVTransaction = idTVTransaction;
  }

  @Override
  @NonNull
  public CardView getRoot() {
    return rootView;
  }

  @NonNull
  public static RecyclerviewHistoryCardBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static RecyclerviewHistoryCardBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.recyclerview_history_card, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static RecyclerviewHistoryCardBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnDelete;
      FloatingActionButton btnDelete = ViewBindings.findChildViewById(rootView, id);
      if (btnDelete == null) {
        break missingId;
      }

      id = R.id.btnUpdate;
      FloatingActionButton btnUpdate = ViewBindings.findChildViewById(rootView, id);
      if (btnUpdate == null) {
        break missingId;
      }

      id = R.id.idTVCatName;
      TextView idTVCatName = ViewBindings.findChildViewById(rootView, id);
      if (idTVCatName == null) {
        break missingId;
      }

      id = R.id.idTVNormalPrice;
      TextView idTVNormalPrice = ViewBindings.findChildViewById(rootView, id);
      if (idTVNormalPrice == null) {
        break missingId;
      }

      id = R.id.idTVQuantity;
      TextView idTVQuantity = ViewBindings.findChildViewById(rootView, id);
      if (idTVQuantity == null) {
        break missingId;
      }

      id = R.id.idTVTotalPrice;
      TextView idTVTotalPrice = ViewBindings.findChildViewById(rootView, id);
      if (idTVTotalPrice == null) {
        break missingId;
      }

      id = R.id.idTVTransaction;
      TextView idTVTransaction = ViewBindings.findChildViewById(rootView, id);
      if (idTVTransaction == null) {
        break missingId;
      }

      return new RecyclerviewHistoryCardBinding((CardView) rootView, btnDelete, btnUpdate,
          idTVCatName, idTVNormalPrice, idTVQuantity, idTVTotalPrice, idTVTransaction);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
